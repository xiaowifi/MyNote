<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on 个人主页</title>
    <link>http://lalalaxiaowifi.gitee.io/pictures/tags/android/</link>
    <description>Recent content in android on 个人主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020-2099</copyright>
    <lastBuildDate>Mon, 04 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://lalalaxiaowifi.gitee.io/pictures/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rxjava观察者</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E5%88%9B%E5%BB%BA%E8%A7%82%E5%AF%9F%E8%80%85/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E5%88%9B%E5%BB%BA%E8%A7%82%E5%AF%9F%E8%80%85/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 观察者创建 observer  2.0 import io.reactivex.Observer; 观察者用于接收 被观察者提供的数据信息。暂时不清楚被观察者调用其他观察者的逻辑。
  new Observer&amp;lt;泛型&amp;gt;(){};需要需要实现方法。Android上网络请求通常使用这个就好了。  其他观察者 其他观察者 2.2.20 提供观察者 位于io.reactivex.functions 包下 
 Action BiConsumer BiFunction BiPredicate BooleanSupplier Cancellable Consumer Function Function3 Function4 Function5 Function6 Function7 Function8 Function9 IntFunction LongConsumer Predicate  action 一个类似于Runnable的功能接口，但允许抛出一个已检查的异常。
1 2 </description>
    </item>
    
    <item>
      <title>Rxjava使用CompositeDisposable进行统一注销监听</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E4%B8%ADcompositedisposable%E8%BF%9B%E8%A1%8C%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E6%B3%A8%E9%94%80/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E4%B8%ADcompositedisposable%E8%BF%9B%E8%A1%8C%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E6%B3%A8%E9%94%80/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文  在观察者的回调方法中，有一个onSubscribe(Disposable d) 开始连接方法，Disposable 可以控制是否关闭后面的回调。JAVA 对象是有生命周期的。 这个时候，对于某些监听回调，就可以统一安排处理了。
 1 private final CompositeDisposable mDisposable = new CompositeDisposable(); 2// subscribe 需要使用返回 一个Disposable的那个方法。 3 Disposable md = Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() { 4 @Override 5 public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) throws Exception { 6 7 } 8 }).subscribe(integer -&amp;gt; Log.e(TAG, &amp;#34;demo2: &amp;#34; + integer)); 9 disposable.add(md); 10 11@Override 12 protected void onStop() { 13 super.</description>
    </item>
    
    <item>
      <title>Rxjava其他运算</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E5%85%B6%E4%BB%96%E8%BF%90%E7%AE%97/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E5%85%B6%E4%BB%96%E8%BF%90%E7%AE%97/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 链式调用 Observable  背压运算符 Backpressure Operators 背压运算符-处理可观察对象的策略，可观察对象的产生速度比观察者消耗它们的速度快 可连接的可观察算子 具有更精确控制的订阅动态的专业可观察物  Connect -指示可连接的Observable开始向其订阅者发送项目 Publish —将普通的Observable转换为可连接的Observable RefCount -使Connectable Observable表现得像普通的Observable Replay —确保所有观察者看到相同的发射项目序列，即使他们在Observable开始发射项目之后进行订阅  运营商转换可观察物  To —将O​​bservable转换为另一个对象或数据结构 Rxjava所有方法 可观察算子的字母顺序列表
Rxjava所有方法 可观察算子的字母顺序列表</description>
    </item>
    
    <item>
      <title>Rxjava创建被观察者Observable</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E5%88%9B%E5%BB%BA%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E5%88%9B%E5%BB%BA%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 Observable 主要是创建一个新的被观察者Observable
Create —通过编程调用观察者方法从头开始创建Observable Defer —在观察者订阅之前不要创建Observable，并为每个观察者创建一个新的Observable Empty/ Never/Throw -创建具有非常精确和限制行为观测量 From —将其他一些对象或数据结构转换为可观察的 Interval —创建一个Observable，它发出以特定时间间隔隔开的整数序列 Just —将一个对象或一组对象转换为发出该对象或那些对象的Observable Range —创建一个Observable，它发出一系列连续整数 Repeat —创建一个Observable，它反复发出特定的项目或项目序列 Start —创建一个Observable，它发出函数的返回值 Timer —创建一个Observable，它在给定的延迟后发出单个项目 Rxjava所有方法 可观察算子的字母顺序列表</description>
    </item>
    
    <item>
      <title>Rxjava数学运算符和聚合运算符Observable</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%81%9A%E5%90%88%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%81%9A%E5%90%88%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 Observable 对Observable发出的整个项目序列进行操作的运算符
Average —计算Observable发出的数字的平均值，并发出该平均值 Concat —从两个或多个可观测对象发射的发射，而不会相互干扰 Count —计算源Observable发出的项目数，仅发出此值 Max —确定并发出Observable发出的最大价值的物品 Min —确定并发出Observable发出的最小值项 Reduce —将函数依次应用于Observable发出的每个项目，并发出最终值 Sum —计算一个Observable发出的数字的总和，并发出该总和 Rxjava所有方法 可观察算子的字母顺序列表</description>
    </item>
    
    <item>
      <title>Rxjava最简单的使用</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 链式调用 Observable 1 Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() { 2 @Override 3 public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) throws Exception { 4 e.onNext(5); 5 e.onComplete(); 6 } 7 }).observeOn(Schedulers.newThread()).subscribeOn(AndroidSchedulers.mainThread()) 8 .subscribe(new Observer&amp;lt;Integer&amp;gt;() { 9 @Override 10 public void onSubscribe(Disposable d) { 11 12 } 13 14 @Override 15 public void onNext(Integer value) { 16 17 } 18 19 @Override 20 public void onError(Throwable e) { 21 22 } 23 24 @Override 25 public void onComplete() { 26 27 } 28 }); Lambda 表达式版本 1 Observable.</description>
    </item>
    
    <item>
      <title>Rxjava条件运算符和布尔运算符Observable</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 Observable 条件运算符和布尔运算符 评估一个或多个可观察对象或可观察对象发出的项目的运算符
All —确定可观察对象发出的所有项目是否都满足某些条件  这个判断所有项目都是否满足某些条件，所以这个有两个注意点，一个是所以项目，一个是否。
 1 Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() { 2 @Override 3 public void subscribe(@NonNull ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Throwable { 4 emitter.onNext(1); 5 emitter.onNext(2); 6 emitter.onNext(3); 7 emitter.onNext(4); 8 emitter.onNext(5); 9 emitter.onNext(6); 10 emitter.onComplete(); 11 } 12 }).all(new Predicate&amp;lt;Integer&amp;gt;() { 13 @Override 14 public boolean test(Integer integer) throws Throwable { 15 Log.</description>
    </item>
    
    <item>
      <title>Rxjava组合结合被观察者Observable</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E7%BB%93%E5%90%88%E7%BB%84%E5%90%88%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E7%BB%93%E5%90%88%E7%BB%84%E5%90%88%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 Observable And/ Then/When -联合组由两个或更多发射观测量项借助于Pattern与Plan中介 CombineLatest —当两个Observable之一发射一个项目时，通过指定的函数合并每个Observable发射的最新项目，并根据此函数的结果发射项目 Join —在根据另一个可观察对象发出的项目定义的时间窗口中，只要发射了一个可观察对象的项目，则合并两个可观察对象发出的项目 Merge -通过合并排放量将多个可观测值合并为一个 StartWith —在开始从源中发出项目之前，发出指定的项目序列 Switch —将发出Observable的Observable转换为发出可观察到的最新事物的单个Observable Zip —通过指定的函数将多个可观测对象的发射合并在一起，并根据此函数的结果为每个组合发射单个项目 Rxjava所有方法 可观察算子的字母顺序列表</description>
    </item>
    
    <item>
      <title>Rxjava转换被观察者Observable</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E8%BD%AC%E6%8D%A2%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E8%BD%AC%E6%8D%A2%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 Observable 主要是转换被观察者Observable
Buffer —定期将来自一个Observable的项目收集成束，然后发出这些束，而不是一次发出一个 FlatMap —将可观察对象发出的项目转换为可观察项目，然后将这些项目的排放平展为单个可观察项目 GroupBy —将一个Observable划分为一组Observable，它们分别与原始Observable发射一组不同的项，并按key进行组织 Map —通过对每个项目应用函数来转换Observable发出的项目 Scan —将函数依次应用于Observable发出的每个项目，并发出每个连续的值 Window —定期将项目从“可观察”窗口细分为“可观察”窗口，然后发出这些窗口，而不是一次发出一个窗口 Rxjava所有方法 可观察算子的字母顺序列表</description>
    </item>
    
    <item>
      <title>Rxjava过滤被观察者Observable</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E8%BF%87%E6%BB%A4%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E8%BF%87%E6%BB%A4%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 Observable 主要是过滤被观察者Observable
Debounce —仅在经过特定时间跨度时才从Observable发出一项，而不发出另一项 Distinct -抑制可观察对象发出的重复项 ElementAt—仅发射可观察对象发射的项目n Filter —仅从可观察对象中发出通过谓词测试的项 First —仅从Observable发射第一项或满足条件的第一项 IgnoreElements —不要从Observable发出任何项目，而是镜像其终止通知 Last —只发射可观察对象发射的最后一个项目 Sample —定期发射Observable发射的最新项目 Skip—抑制Observable发出的前n个项目 SkipLast—抑制Observable发出的最后n个项目 Take—仅发射可观察对象发射的前n个项目 TakeLast—只发射可观察对象发射的最后n个项目 Rxjava所有方法 可观察算子的字母顺序列表</description>
    </item>
    
    <item>
      <title>Rxjava错误处理被观察者Observable</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 Observable 有助于从Observable的错误通知中恢复的运算符
Catch-onError通过继续执行顺序而没有错误地从通知中恢复 Retry—如果源Observable发送了onError通知，请重新订阅该通知，以希望它可以完成而不会出错 Rxjava所有方法 可观察算子的字母顺序列表</description>
    </item>
    
    <item>
      <title>Rxjava错误处理被观察者Observable</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/%E5%8F%AF%E8%A7%82%E5%AF%9F%E7%9A%84%E5%85%AC%E7%94%A8%E4%BA%8B%E4%B8%9A%E8%BF%90%E8%90%A5%E5%95%86/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/%E5%8F%AF%E8%A7%82%E5%AF%9F%E7%9A%84%E5%85%AC%E7%94%A8%E4%BA%8B%E4%B8%9A%E8%BF%90%E8%90%A5%E5%95%86/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 正文 Observable 一个有用的运算符的工具箱，用于处理Observables
Delay —将排放量从可观察的时间向前移特定量 Do -注册一项行动以应对各种可观察到的生命周期事件 Materialize/Dematerialize —表示发出的项目和作为发出的项目发送的通知，或者逆转此过程 ObserveOn -指定观察者将在其上观察此Observable的调度程序 Serialize -强制Observable进行序列化调用并保持良好行为 Subscribe -根据观测对象的排放和通知进行操作 SubscribeOn —指定Observable订阅时应使用的调度程序 TimeInterval —将发射项目的Observable转换为发射项目，以指示两次发射之间经过的时间 Timeout —镜像源Observable，但如果经过特定时间但没有任何发射项，则发出错误通知 Timestamp —将时间戳记附加到Observable发出的每个项目 Using -创建与可观察对象具有相同使用寿命的可使用资源 Rxjava所有方法 可观察算子的字母顺序列表</description>
    </item>
    
    <item>
      <title>Android中关于Rxjava Flowable相关笔记整理</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E5%85%B3%E4%BA%8Eflowable/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E5%85%B3%E4%BA%8Eflowable/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 Rxjava javaDoc地址
正文  如果上游发射的很快而下游处理的很慢，会怎样呢？ 将会产生很多下游没来得及处理的数据，这些数据既不会丢失，也不会被垃圾回收机制回收，而是存放在一个异步缓存池中，如果缓存池中的数据一直得不到处理，越积越多，最后就会造成内存溢出，这便是Rxjava中的背压问题。 Flowable类实现了反应式流模式，并提供了工厂方法，中间运算符以及使用反应式数据流的能力.
 1Flowable.create(new FlowableOnSubscribe&amp;lt;Integer&amp;gt;() { 2 @Override 3 public void subscribe(FlowableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception { 4 emitter.onNext(1); 5 emitter.onNext(2); 6 emitter.onNext(3); 7 emitter.onNext(4); 8 emitter.onComplete(); 9 } 10 }, BackpressureStrategy.BUFFER).subscribe(new Subscriber&amp;lt;Integer&amp;gt;() { 11 @Override 12 public void onSubscribe(Subscription s) { 13 s.request(Long.MAX_VALUE); 14 System.out.print(&amp;#34;onSubscribe&amp;#34; + s); 15 } 16 17 @Override 18 public void onNext(Integer integer) { 19 System.</description>
    </item>
    
    <item>
      <title>Android中关于Rxjava Flowable相关笔记整理(转载)</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E4%B8%ADflowable%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0%E8%BD%AC%E8%BD%BD/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E4%B8%ADflowable%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0%E8%BD%AC%E8%BD%BD/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 Rxjava javaDoc地址
正文 数据流发射，处理，响应可能在各自的线程中独立进行，上游在发射数据的时候，不知道下游是否处理完，也不会等下游处理完之后再发射。
这样，如果上游发射的很快而下游处理的很慢，会怎样呢？
将会产生很多下游没来得及处理的数据，这些数据既不会丢失，也不会被垃圾回收机制回收，而是存放在一个异步缓存池中，如果缓存池中的数据一直得不到处理，越积越多，最后就会造成内存溢出，这便是Rxjava中的背压问题。
例如，运行以下代码：
demo1.jpg
创建一个可观察对象Obervable在Schedulers.newThread()()的线程中不断发送数据，而观察者Observer在Schedulers.newThread()的另一个线程中每隔5秒接收一条数据，运行后，查看内存使用如下：
backpressure.gif
由于上下游分别在各自的线程中独立处理数据（如果上下游在同一线程中，下游对数据的处理会堵塞上游数据的发送，上游发送一条数据后会等下游处理完之后再发送下一条），而上游发送数据速度远大于下游接收数据的速度，造成上下游流速不均，导致数据累计，最后引起内存溢出。
Flowable
Flowable是为了解决背压（backpressure）问题，而在Observable的基础上优化后的产物，与Observable不是同一组观察者模式下的成员，Flowable是Publisher与Subscriber这一组观察者模式中Publisher的典型实现，Observable是ObservableSource/Observer这一组观察者模式中ObservableSource的典型实现；
所以在使用Flowable的时候，可观察对象不再是Observable,而是Flowable;观察者不再是Observer，而是Subscriber。Flowable与Subscriber之间依然通过subscribe()进行关联。
有些朋友可能会想，既然Flowable是在Observable的基础上优化后的产物，Observable能解决的问题Flowable都能进行解决，何不抛弃Observable而只用Flowable呢。其实，这是万万不可的，他们各有自己的优势和不足。
由于基于Flowable发射的数据流，以及对数据加工处理的各操作符都添加了背压支持，附加了额外的逻辑，其运行效率要比Observable低得多。
因为只有上下游运行在各自的线程中，且上游发射数据速度大于下游接收处理数据的速度时，才会产生背压问题。
所以，如果能够确定上下游在同一个线程中工作，或者上下游工作在不同的线程中，而下游处理数据的速度高于上游发射数据的速度，则不会产生背压问题，就没有必要使用Flowable，以免影响性能。
通过Flowable发射处理数据流的基础代码如下：
demo2.jpg
执行结果如下：
System.out: 发射----&amp;gt; 1System.out: 发射----&amp;gt; 2System.out: 发射----&amp;gt; 3System.out: 发射----&amp;gt; 完成System.out: 接收----&amp;gt; 1System.out: 接收----&amp;gt; 2System.out: 接收----&amp;gt; 3System.out: 接收----&amp;gt; 完成
我们发现运行结果与Observerable没有区别，但是的代码中，除了为上下游指定各自的运行线程外，还有三点不同
一、create方法中多了一个BackpressureStrategy类型的参数。
二、onSubscribe回调的参数不是Disposable而是Subscription，多了行代码：
s.request(Long.MAX_VALUE);
三、Flowable发射数据时，使用的发射器是FlowableEmitter而不是ObservableEmitter
BackpressureStrategy背压策略
在Flowable的基础创建方法create中多了一个BackpressureStrategy类型的参数，
BackpressureStrategy是个枚举，源码如下：
publicenumBackpressureStrategy { ERROR,BUFFER,DROP,LATEST,MISSING}
其作用是什么呢？
Flowable的异步缓存池不同于Observable，Observable的异步缓存池没有大小限制，可以无限制向里添加数据，直至OOM,而Flowable的异步缓存池有个固定容量，其大小为128。
BackpressureStrategy的作用便是用来设置Flowable通过异步缓存池存储数据的策略。
ERROR
在此策略下，如果放入Flowable的异步缓存池中的数据超限了，则会抛出MissingBackpressureException异常。
运行如下代码：</description>
    </item>
    
    <item>
      <title>Android中关于Rxjava相关笔记整理</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/android%E4%B8%ADrxjava%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/android%E4%B8%ADrxjava%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</guid>
      <description>前言 本Demo 主要是针对 Rxjava Android 版本进行实践
Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 Rxjava javaDoc地址
正文 被观察者 创建可观察物 产生新的Observable的运算符。
 Create —通过编程调用观察者方法从头开始创建Observable Defer -在观察者订阅之前不要创建Observable，并为每个观察者创建一个新的Observable Empty/ Never/Throw -创建具有非常精确和限制行为观测量 From —将其他一些对象或数据结构转换为可观察的 Interval —创建一个Observable，它发出以特定时间间隔隔开的整数序列 Just —将一个对象或一组对象转换为发出该对象或那些对象的Observable Range —创建一个Observable，它发出一系列连续整数 Repeat —创建一个Observable，它反复发出特定的项目或项目序列 Start —创建一个Observable，它发出函数的返回值 Timer —创建一个Observable，它在给定的延迟后发出单个项目  转换可观察物 转换由Observable发出的项目的运算符。
 Buffer —定期将来自一个Observable的项目收集成束，然后发出这些束，而不是一次发出一个 FlatMap —将可观察对象发出的项目转换为可观察项目，然后将这些项目的排放平展为单个可观察项目 GroupBy —将一个Observable划分为一组Observable，它们分别与原始Observable发射一组不同的项，并按key进行组织 Map —通过对每个项目应用函数来转换Observable发出的项目 Scan —将一个函数依次应用于Observable发出的每个项目，并发出每个连续的值 Window —定期将项目从“可观察”窗口细分为“可观察”窗口，然后发出这些窗口，而不是一次发出一个窗口  过滤可观察物 有选择地从Observable源发出项目的运算符。
 Debounce —仅在经过特定时间跨度时才从Observable中发出一项，而不发出另一项 Distinct -抑制可观察对象发出的重复项 ElementAt —仅发射可观察对象发射的项目n Filter —仅从可观察对象中发出通过谓词测试的项 First —仅从Observable发出第一项或满足条件的第一项 IgnoreElements —不要从Observable发出任何项目，而是镜像其终止通知 Last —只发射可观察对象发射的最后一个项目 Sample —定期发射Observable发射的最新项目 Skip —抑制Observable发出的前n个项目 SkipLast —抑制Observable发出的最后n个项目 Take —仅发射可观察对象发射的前n个项目 TakeLast —只发射可观察对象发射的最后n个项目  结合可观察物 与多个源Observables一起创建单个Observable的运算符</description>
    </item>
    
    <item>
      <title>Android开启Debug</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/android%E5%BC%80%E5%90%AFdebug%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/android%E5%BC%80%E5%90%AFdebug%E4%B9%8B%E8%B7%AF/</guid>
      <description>前言 电脑不是太好。现在用的也仅仅是mac air 1.8 GHz 双核Intel Core i5 8 GB 1600 MHz DDR3。电脑情况不是太好，需要经常清理缓存啊，运行代码量稍微大一点的项目就感觉慢。打算明年换一个好一点的。所以我本人是比较倾向于插件化和aar的使用的，fragment 使用比重也很高，毕竟只要写好了模板，debug功能还是比activity 简单些。
说回正题。Android debug 模式也不多，常用的一般分为：
 打印log 打断点 测试代码 让测试复现bug 等  顺便推一下博客目录
正文 打印log ​	这种情况，一般是检查参数或者接口的时候，如果电脑不怎么行，打log 电脑也不怎么卡，打断点可能就卡了。
但是呢，string 虽说够长，但是log 的打印是有长度限制的。万一log体长度超出了怎么办？只能代码截取分log 打印了。像这种网络上还是蛮多的。
打断点 本篇我们也就主要是介绍下打断点。可能出现的问题。
先介绍下图标1是run（运行，如果手机上没有安装当前app 这个应该是三角形）.2是debug,3是attach debugger to android process。
  debug 版本运行不到手机上。重新编译项目或者删除主项目下 build文件（不要删除错了），还有重新导入编译项目，一般就可以运行到手机上了。
  idea 左边栏有一个 Build variants 工具（可能在其他位置）可以切马甲包配置或者release，debug等。同一个APP 下版本应该是一致的。切成同一个版本就好了。
  release 版本是无法运行debug的。 如果使用release 版本debug 会提示:
 Error running &#39;sqliteroom&#39; Cannot debug application from module sqliteroom on device huawei-lld_al00-MKJDU17C08001071.</description>
    </item>
    
    <item>
      <title>android中使用Rxjava实现事件重复控制笔记</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/android%E4%B8%AD%E5%9F%BA%E4%BA%8Erxjava%E5%AE%9E%E7%8E%B0%E4%BA%8B%E4%BB%B6%E9%87%8D%E5%A4%8D%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/android%E4%B8%AD%E5%9F%BA%E4%BA%8Erxjava%E5%AE%9E%E7%8E%B0%E4%BA%8B%E4%BB%B6%E9%87%8D%E5%A4%8D%E6%8E%A7%E5%88%B6/</guid>
      <description>》 顺便推一下博客主页
前言 资料 Rxjava Android 版本 github 地址 Rxjava 地址 Rxjava 官方文档地址 Rxjava javaDoc地址 RxBinding GitHub地址
QWQ  android搬砖久了，也慢慢习惯了。最近发现自己对重复点击，或者方法重复调用就没有整理过，使用方式也大概是需要处理的地方处理。通常是记一个时间，然后算两个时间。点击事件倒是封装了简单的。方法调用全靠逻辑控制。 IDEA你已经是成熟的编辑器了，该学会自己写代码了。最近搬砖的时候，发现项目中竟然有Rxjava和Rxbinding.emmmmmm?竟然有这个。那么事件重复不就解决了，别问，问就是才入坑。
 正文 点击事件重复 话说这个简单。基于rxjava 的操作符 debounce 就可以实现了。debounce主要是做拦截处理的。处理逻辑，只要当前对象在某个时间段内重复发送onNext,那么就不发送，最简单的逻辑就是，他其实可以看做一个延时发送onNext功能，发送了onNext，会排到一个队列中，当最后一个在时间段内没有被其他onNext顶替的时候才会回调到监听方法中，如同是最后一下onNext 延时回调了。具体的可以参考rxjava.rxJava会在后面整理。当然了实现重复过滤的操作还是蛮多的，你说我只要第一个，不要其他的，换操作符就行，本笔记主要是整理思路。
rxbinding 使用  因为这个时间可能是需要固定的，不想每个都改，然后写成static 需要注明生产消费线程，否则会拉去不到线程，无法操作UI.
 1public static void clicks(View view, Consumer onNext){ 2 RxView.clicks(view).debounce(300, TimeUnit.MILLISECONDS).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(onNext); 3} 当然了，大佬提供了其他的，就需要自己去看了，详细的后面（后面就不知道会排到什么时候）会整理到笔记中。
方法调用重复(抛弃前面的使用最后面的)  看了rxbinding的使用，发现他就自定义 Observable，然后在里面调用 onNext,然后，瞬间觉得，这个调调，我还是可以的。然后开整。
 因为方法调用重复，一般就是将需要过滤的方法放到监听后执行。在方法调用的前置条件中去执行onNext.emmmmm?这不就是普通的Rxjava的使用吗？既然大佬都自己定义了一个Observable，那我也要自己整一个。这个地方可能就需要涉及到一个逻辑了，他发送者和消费者是对应的，那么你在一个方法中实现发送者和消费者的监听，然后不停的调用哪个方法，也达不到重复使用的目的呀，所以这个发送者消费者关联是不是就应该只执行一次，通过onNext多次调用达到效果。
还有一个问题，onNext执行前的代码可能相同，是不是也需要单独提到一个方法中然后再调用onNext呢。
前置执行方法 1@FunctionalInterface 2public interface DggFunction { 3 void apply(); 4} 自定义 Observable 1/** 2 * @author:yangfan 3 * @date: 2021/3/11 20:28 4 * @description: 这个主要是提供一个方法使用的 Observable。在调用 DggFunction中的apply时候，发送 onNext 5 * @update: [ 2021/3/11] [更改人] [更改内容] 6 **/ 7public class FunctionObservable extends Observable&amp;lt;DggFunction&amp;gt; { 8 DggFunction dggFunction; 9 Observer observer; 10 11 public FunctionObservable(DggFunction dggFunction) { 12 this.</description>
    </item>
    
    <item>
      <title>Rxbinding学习笔记</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxbinding/rxbinding%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxbinding/rxbinding%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
      <description>》 顺便推一下博客主页
前言  RxBinding GitHub地址
 正文  主要是自己定义了一个Observable，然后调用Rx相关的api.因为Observable消息的发送就是在Observable中，所以可以自定义Observable 逻辑达到自己想要的效果。
 事件防止重复  因为android 上的pop或者dialog并不是第一时间加载出来的。所以点击事件在逻辑上可能出现点击了很多次，然后弹窗才出现，如果点击事件没有弹窗遮挡事件，那么就可能导致同一个方法或者网络请求被请求了多次，这个就很骚了。 所以点击事件防止重复点击还是蛮重要的。
 现阶段，android都在国内搬砖多年了，各种成熟的方法都有。这篇博客就写的很细《Android处理按钮重复点击事件》 。
 记录调用时间，在某个时间段内可以return。 封装上一个逻辑，然后统一调用。 基于Rxjava的延时等过滤操作符自己实现Observable，然后设置操作符。 Aspectj 这个没有用过。  Rxbinding Rxjava  这个调调主要是提供了一个各种view的Observable。
  debounce  结束   </description>
    </item>
    
    <item>
      <title>Rxjava中过滤相关</title>
      <link>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E4%B8%AD%E8%BF%87%E6%BB%A4%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://lalalaxiaowifi.gitee.io/pictures/posts/android/rxjava/rxjava%E4%B8%AD%E8%BF%87%E6%BB%A4%E7%9B%B8%E5%85%B3/</guid>
      <description>》 顺便推一下博客主页
前言  在应用开发去去抖动还是很有必要的，或者说节流。最常见的就是事件的重复性。比如说方法重复调用，导致对象重复初始化，或者按钮重复点击等等。大体来说就是要过滤一些东西。比如说只是抓取第一次，其他的过滤，也可以是抓取最后一次，前面的 过滤。当然了一般都有时间限制。 比如说 300毫秒呢的重复点击只有一次生效，或者抢东西的时候，第一次生效。当然了，这个调调是可以通过严谨的代码逻辑去控制的，但是，写的地方多了，就烦了。所以说过滤就很重要。过滤掉那些不需要的调用，可以明确逻辑，然后减少些莫名其妙bug.最重要的是防止被搞，比如说，后台大佬没有对请求进行过滤，然后点一下，请求一下，就一直开脚本点，手机不炸我不停止，还是有点恶心人的。还有一些东西，全局就初始化一次，你经常去初始化人家就不行。
 正文 过滤这个调调，在Rxjava 中有两个大的分类。
 throttle 相关的时间控制  Throttle throttleFirst throttleLast throttleWithSelector throttleWithTimeout   一个是发送控制.  Debounce —仅在经过特定时间跨度时才从Observable发出一项，而不发出另一项 Distinct -抑制可观察对象发出的重复项 ElementAt—仅发射可观察对象发射的项目n Filter —仅从可观察对象中发出通过谓词测试的项 First —仅从Observable发射第一项或满足条件的第一项 Last —只发射可观察对象发射的最后一个项目(直接调用，发送next没有监听到回调) Sample —定期发射Observable发射的最新项目 Skip—抑制Observable发出的前n个项目 SkipLast—抑制Observable发出的最后n个项目 Take—仅发射可观察对象发射的前n个项目 TakeLast—只发射可观察对象发射的最后n个项目    其实他们有很多是通用的，比如说Debounce的官方介绍文档和throttle的介绍文档是一样的。区别就在于，一个是基于时间的，一个是基于发送对象的。反正都是要过滤，所以就一套整完整。Rxjava感觉主要的控制Observable 发送消息，比如说:
1observer.onNext(); 2observer.onComplete(); 3observer.onError(); 4observer.onSubscribe(); 无论时间控制还是发送控制，都是基于上面几个方法的。其他的回调，方法什么的没有自定义的地步。通常都是自定义observer，处理发送消息罢了。比如说RxBinding。</description>
    </item>
    
  </channel>
</rss>
